(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{461:function(t,s,a){"use strict";a.r(s);var r=a(27),v=Object(r.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git基本使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git基本使用"}},[t._v("#")]),t._v(" Git基本使用")]),t._v(" "),a("h2",{attrs:{id:"本地仓库关联到远程仓库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#本地仓库关联到远程仓库"}},[t._v("#")]),t._v(" 本地仓库关联到远程仓库")]),t._v(" "),a("ol",[a("li",[t._v("将本地项目初始化为git仓库\n"),a("ol",[a("li",[a("code",[t._v("git init")])])])]),t._v(" "),a("li",[t._v("远程新建repository")]),t._v(" "),a("li",[t._v("正式进行关联和推送\n"),a("ol",[a("li",[t._v("关联远程库： "),a("code",[t._v("git remote add origin git@server-name:path/repo-name.git")])]),t._v(" "),a("li",[t._v("推送本地仓库内容 ："),a("code",[t._v("git push -u origin master")]),t._v(" "),a("br")])])])]),t._v(" "),a("h2",{attrs:{id:"基本使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本使用"}},[t._v("#")]),t._v(" 基本使用")]),t._v(" "),a("ol",[a("li",[t._v("工作目录---\x3e暂存区 ："),a("code",[t._v("git add .")])]),t._v(" "),a("li",[t._v("暂存区  ---\x3e本地仓库 ： "),a("code",[t._v('git commit -m "some commit info"')])]),t._v(" "),a("li",[t._v("拉取远程: "),a("code",[t._v("git pull origin 分支名")])]),t._v(" "),a("li",[t._v("本地仓库---\x3e远程仓库 ： "),a("code",[t._v("git push origin 分支名")])])]),t._v(" "),a("p",[a("strong",[t._v("注意事项：")])]),t._v(" "),a("ol",[a("li",[t._v("push到远程前要先pull远程数据")]),t._v(" "),a("li",[t._v("若有冲突需先解决冲突")]),t._v(" "),a("li",[t._v("然后再次提交(add和commit)")]),t._v(" "),a("li",[t._v("最后push(如果push到master分支，可以简写为"),a("code",[t._v("git push")]),t._v(")"),a("br"),t._v(" "),a("br")])]),t._v(" "),a("h2",{attrs:{id:"git-pull命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-pull命令"}},[t._v("#")]),t._v(" git pull命令")]),t._v(" "),a("p",[a("strong",[t._v("作用")]),t._v("：取回远程仓库某个分支的更新，并与本地某个分支合并。"),a("br"),t._v(" "),a("strong",[t._v("完整语法")]),t._v("：git pull 远程主机名 远程分支名:本地分支名"),a("br"),t._v(" "),a("strong",[t._v("举例")]),t._v("："),a("code",[t._v("git pull origin wlk:main")]),t._v("       取回远程origin主机的wlk分支与本地的main分支合并。"),a("br"),t._v(" "),a("br")]),t._v(" "),a("h2",{attrs:{id:"暂存区回退到工作区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#暂存区回退到工作区"}},[t._v("#")]),t._v(" 暂存区回退到工作区")]),t._v(" "),a("p",[a("code",[t._v("git reset HEAD <file>")]),t._v(" 将file从暂存区回退到工作空间"),a("br"),t._v(" "),a("code",[t._v("git reset")]),t._v(" 简写，回滚暂存区的所有添加"),a("br"),t._v(" "),a("br")]),t._v(" "),a("h2",{attrs:{id:"取消本次修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#取消本次修改"}},[t._v("#")]),t._v(" 取消本次修改")]),t._v(" "),a("p",[t._v("指还没有进入暂存区的修改。")]),t._v(" "),a("p",[a("code",[t._v("git checkout -- <file>")]),t._v(" 将工作空间的还没有add的修改取消掉\n"),a("br")]),t._v(" "),a("h2",{attrs:{id:"覆盖上次的commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#覆盖上次的commit"}},[t._v("#")]),t._v(" 覆盖上次的commit")]),t._v(" "),a("p",[a("code",[t._v('git commit --amend -m "message"')]),t._v(" 覆盖掉上一次的commit信息\n"),a("br")]),t._v(" "),a("h2",{attrs:{id:"回退到指定版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回退到指定版本"}},[t._v("#")]),t._v(" 回退到指定版本")]),t._v(" "),a("p",[t._v("回退到上一个版本："),a("code",[t._v("git reset --hard HEAD^")]),a("br"),t._v("\n回退到上三个版本："),a("code",[t._v("git reset --hard HEAD^^^")]),a("br"),t._v("\n回退到指定版本："),a("code",[t._v("git reset --hard commit-id")]),a("br"),t._v(" "),a("strong",[t._v("注意")]),a("br"),t._v("\n1.版本回退时，若工作区和暂存区有未提交的修改，会被撤销掉。这点要"),a("strong",[t._v("特别注意")]),a("br"),t._v("\n2.若回退后，再想恢复，可用 "),a("code",[t._v("git reflog")]),t._v(" 查看历史命令，找到相关commit-id，再次reset。\n"),a("br")]),t._v(" "),a("h2",{attrs:{id:"分支操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分支操作"}},[t._v("#")]),t._v(" 分支操作")]),t._v(" "),a("ol",[a("li",[t._v("创建分支 ： "),a("code",[t._v("git branch 分支名")])]),t._v(" "),a("li",[t._v("切换分支  :  "),a("code",[t._v("git checkout 分支名")])]),t._v(" "),a("li",[t._v("创建并切换： "),a("code",[t._v("git checkout -b 分支名")])]),t._v(" "),a("li",[t._v("查看分支："),a("code",[t._v("git branch")])]),t._v(" "),a("li",[t._v("合并分支："),a("code",[t._v("git merge 分支名")]),t._v(" ---\x3e 合并其他分支到当前分支")]),t._v(" "),a("li",[t._v("删除分支 ： "),a("code",[t._v("git branch -d 分支名")])]),t._v(" "),a("li",[t._v("删除远程分支 ： "),a("code",[t._v("git push origin -d 分支名")])]),t._v(" "),a("li",[t._v("拉取远程分支(本地不存在的分支) : "),a("code",[t._v("git checkout -b 本地分支名 origin/远程分支名")])]),t._v(" "),a("li",[t._v("push本地存在而远程不存在的分支时，远程会自动创建分支: "),a("code",[t._v("git push origin 分支名")])])]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"git-rebase-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase-命令"}},[t._v("#")]),t._v(" git rebase 命令")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("git pull --rebase origin 分支名")]),t._v(" "),a("blockquote",[a("p",[t._v("拉取远程代码并整理提交记录，保持提交记录为一条线")])])]),t._v(" "),a("li",[a("strong",[t._v("git rebase -i starCommitID endCommitID")]),t._v(" "),a("blockquote",[a("p",[t._v("整理提交记录，前开后闭。"),a("br"),t._v("\nendCommitID可以不写，默认为最新提交记录，但是一旦使用了，就会丢弃endCommitID之后的提交")])])]),t._v(" "),a("li",[a("strong",[t._v("git rebase 其他分支 当前分支")]),t._v(" "),a("blockquote",[a("p",[t._v("变基操作"),a("br"),t._v("\n前提："),a("code",[t._v("当前分支")]),t._v("是从"),a("code",[t._v("其他分支")]),t._v("拉取的子分支"),a("br"),t._v(" "),a("code",[t._v("当前分支")]),t._v("的提交拼接到"),a("code",[t._v("其他分支")]),t._v("的最新提交之后")])])])]),t._v(" "),a("h2",{attrs:{id:"git-cherry-pick-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-cherry-pick-命令"}},[t._v("#")]),t._v(" git cherry-pick 命令")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("git cherry-pick commitID")]),t._v(" "),a("blockquote",[a("p",[t._v("将其他分支的commitID应用到当前分支")])])])]),t._v(" "),a("h2",{attrs:{id:"commitid拉取分支"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commitid拉取分支"}},[t._v("#")]),t._v(" commitID拉取分支")]),t._v(" "),a("ol",[a("li",[t._v("从指定提交拉取分支："),a("strong",[t._v("git branch 分支名 commitID")])]),t._v(" "),a("li",[t._v("从指定提交拉取分支并切换： "),a("strong",[t._v("git checkout -b 分支名 commitID")])])]),t._v(" "),a("h2",{attrs:{id:"git-stash-命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-stash-命令"}},[t._v("#")]),t._v(" git stash 命令")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v('git stash save "save message"')]),t._v(": 执行存储时，添加备注说明。")]),t._v(" "),a("li",[a("strong",[t._v("git stash list")]),t._v("：查看stash列表。")]),t._v(" "),a("li",[a("strong",[t._v("git stash show")]),t._v("：显示具体做了哪些改动，默认显示第一个stash存储，如果要显示其他存储，后面加stash@{$num}，比如第二个"),a("strong",[t._v("git stash show stash@{1}")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("git stash apply")]),t._v("：应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@{0}，如果要使用其他个，添加git stash apply stash@{$num}，比如第二个"),a("strong",[t._v("git stash apply stash@{1}")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("git stash pop")]),t._v("：命令恢复之前缓存的工作目录，将缓存堆栈中的对应stash删除，并将对应修改应用到当前的工作目录下，默认为第一个stash,即stash@{0}，如果要应用并删除其他stash存储，命令："),a("strong",[t._v("git stash pop stash@{$num}")]),t._v("。")]),t._v(" "),a("li",[a("strong",[t._v("git stash drop stash@{$num}")]),t._v("：删除stash@{$num}存储。")]),t._v(" "),a("li",[a("strong",[t._v("git stash clear")]),t._v("：删除所有缓存的stash存储。\n新增的文件，直接执行stash是不会被存储的。需要先用git add命令将其添加到git暂存区，才可以被git stash保存。")])]),t._v(" "),a("h2",{attrs:{id:"合并冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#合并冲突"}},[t._v("#")]),t._v(" 合并冲突")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v("head    \n当前分支最新提交   \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v("   \n其他分支提交或当前分支其他人的提交   \n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v("其他commit"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("id\n")])])]),a("ol",[a("li",[a("p",[t._v("当两个人同时更改了同一个文件的"),a("strong",[t._v("文件名")]),t._v("时，会冲突；手动合并文件，再提交。")])]),t._v(" "),a("li",[a("p",[t._v("远程删除了某文件，本地修改了该文件，导致本地修改的文件与不存在的文件冲突；解决办法是：1-删除该文件再提交；2-直接提交（需要再次add和commit）")])])]),t._v(" "),a("br"),t._v(" "),a("h2",{attrs:{id:"标签操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标签操作"}},[t._v("#")]),t._v(" 标签操作")]),t._v(" "),a("ol",[a("li",[t._v("切换到目标分支上")]),t._v(" "),a("li",[t._v("执行"),a("code",[t._v("git tag 标签名")]),a("br"),t._v(" "),a("strong",[t._v("在指定commit-id上打标签")]),t._v(" : "),a("code",[t._v("git tag 标签名 commit-id")]),a("br"),t._v(" "),a("strong",[t._v("打指定并标签信息")]),t._v(" ： "),a("code",[t._v('git tag -a 标签名 -m "message" commit-id')])])]),t._v(" "),a("p",[t._v("命令 "),a("code",[t._v("git push origin 标签名")]),t._v(" 可以推送一个本地标签；"),a("br"),t._v("\n命令 "),a("code",[t._v("git push origin --tags")]),t._v(" 可以推送全部未推送过的本地标签；"),a("br"),t._v("\n命令 "),a("code",[t._v("git tag -d 标签名")]),t._v(" 可以删除一个本地标签；"),a("br"),t._v("\n命令 "),a("code",[t._v("git push origin :refs/tags/标签名")]),t._v(" 可以删除一个远程标签。"),a("br"),t._v(" "),a("br")]),t._v(" "),a("h2",{attrs:{id:"强制获取远程最新版本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强制获取远程最新版本"}},[t._v("#")]),t._v(" 强制获取远程最新版本")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("删除本地src"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("这一步可有可无，但是为保安全建议拷贝一下，以防万一\ngit fetch "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("all\ngit reset "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("hard origin"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("分支名\ngit pull\n")])])]),a("br"),t._v(" "),a("h2",{attrs:{id:"强制推送本地代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强制推送本地代码"}},[t._v("#")]),t._v(" 强制推送本地代码")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("方法一：\ngit push "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("f origin 分支名\n方法二：\n\t拷贝本地src\n\tpull代码\n    删除src\n    拷入src\n    push代码\n")])])]),a("br"),t._v(" "),a("h2",{attrs:{id:"git默认对文件名大小写不敏感"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git默认对文件名大小写不敏感"}},[t._v("#")]),t._v(" git默认对文件名大小写不敏感")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("git config "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("get core"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ignorecase\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看是否文件名大小写敏感，true为不敏感，false为敏感")]),t._v("\n\ngit config core"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ignorecase false\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#将git设置为文件名大小写敏感")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=v.exports}}]);